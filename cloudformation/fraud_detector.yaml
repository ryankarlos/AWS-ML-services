Description: "Simple Detector resource containing inline Rule, EventType, Variable, EntityType and Label resource definitions"
Parameters:
  Bucket:
    Default: "fraud-sample-data"
    Description: "S3 Bucket containing fraud data"
    Type: "String"
  Prefix:
    Default: "input"
    Description: "folder containing data in S3 for glue crawler"
    Type: "String"
  SQSTrainSourceKey:
    Default: "glue_transformed/train/fraudTrain.csv"
    Description: "path to fraud train file for which event change sends notification to SQS"
    Type: "String"
  DetectorName:
    Default: "fraud_detector_demo"
    Description: "fraud detector name"
    Type: "String"
  ModelName:
    Default: "fraud_model"
    Description: "fraud model name"
    Type: "String"
  EntityType:
    Default: "customer"
    Type: "String"
  EventType:
    Default: "credit_card_transaction"
    Type: "String"
  ModelType:
    Default: "ONLINE_FRAUD_INSIGHTS"
    Type: "String"
  ModelVersion:
    Default: "2"
    Type: "String"
  DetectorVersion:
    Default: "2"
    Type: "String"
  Region:
    Default: "us-east-1"
    Type: "String"
  RoleName:
    Default: "FraudDetectorRoleS3Access"
    Description: "path to fraud train file for which event change sends notification to SQS"
    Type: "String"
  TrainMode:
    Default: "create"
    AllowedValues:
      - create
      - update
    Description: "Whether bump model major version or update existing major version (minor version bump)"
    Type: "String"
  SQSPredictSourceKey:
    Default: "batch_predict/fraudTest.csv"
    Description: "S3 key corresponding to batch data set as source for SQS queue"
    Type: "String"
  FraudDetectorResultsKey:
    Default: "DetectorBatchResults.csv"
    Description: "S3 key for results from batch predict job"
    Type: "String"
  ModelScoreThresholdMin:
    Default: 700
    Description: "Fraud Model Insight Socre Lower Threshold for Augmented AI. Default is set according to the lower limit in review rule"
    Type: "Number"
  ModelScoreThresholdMax:
    Default: 900
    Description: "Fraud Model Insight Score Upper Threshold for Augmented AI. Default is set according to the upper limit in review rule"
    Type: "Number"
Resources:
  FraudDetector:
    Type: AWS::FraudDetector::Detector
    Properties:
      DetectorId: !Ref DetectorName
      Description: "A detector defined and created in a CloudFormation stack"
      DetectorVersionStatus: ACTIVE
      Rules:
        - RuleId: "investigate"
          Description: "investigate outcome if model score above 890"
          DetectorId: "fraud_detector_demo"
          Expression: "$amt > 900"
          Language: "DETECTORPL"
          Outcomes:
            - Name: "high_risk"
              Inline: true
        - RuleId: "review"
          Description: "reviews transactions between model score 700 and 900"
          DetectorId: "fraud_detector_demo"
          Expression: "$amt < 900 and $amt > 700"
          Language: "DETECTORPL"
          Outcomes:
            - Name: "medium_risk"
              Inline: true
        - RuleId: "approve"
          Description: "automatically approve transaction below model score 700"
          DetectorId: "fraud_detector_demo"
          Expression: "$amt < 700"
          Language: "DETECTORPL"
          Outcomes:
            - Name: "low_risk"
              Inline: true
      EventType:
        Inline: "true"
        Name: !Ref EventType
        EventVariables:
          - Name: "trans_num"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "ORDER_ID"
            Inline: 'true'
          - Name: "job"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "CATEGORICAL"
            Inline: 'true'
          - Name: "city_pop"
            DataSource: 'EVENT'
            DataType: 'FLOAT'
            DefaultValue: '0.0'
            VariableType: "NUMERIC"
            Inline: 'true'
          - Name: "amt"
            DataSource: 'EVENT'
            DataType: 'FLOAT'
            DefaultValue: '0.0'
            VariableType: "PRICE"
            Inline: 'true'
          - Name: "street"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "BILLING_ADDRESS_L1"
            Inline: 'true'
          - Name: "cc_num"
            DataSource: 'EVENT'
            DataType: 'FLOAT'
            DefaultValue: '0.0'
            VariableType: "NUMERIC"
            Inline: 'true'
          - Name: "gender"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "CATEGORICAL"
            Inline: 'true'
          - Name: "merchant"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "CATEGORICAL"
            Inline: 'true'
          - Name: "last"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "BILLING_NAME"
            Inline: 'true'
          - Name: "first"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "BILLING_NAME"
            Inline: 'true'
          - Name: "state"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "BILLING_STATE"
            Inline: 'true'
          - Name: "city"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "BILLING_CITY"
            Inline: 'true'
          - Name: "zip"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "BILLING_ZIP"
            Inline: 'true'
          - Name: "category"
            DataSource: 'EVENT'
            DataType: 'STRING'
            DefaultValue: 'null'
            VariableType: "PRODUCT_CATEGORY"
            Inline: 'true'
        EntityTypes:
          - Name: !Ref EntityType
            Inline: 'true'
        Labels:
          - Name: "legit"
            Inline: 'true'
          - Name: "fraud"
            Inline: 'true'
  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        PythonVersion: "3"
        ScriptLocation: !Sub "s3://aws-glue-assets-${AWS::AccountId}-${AWS::Region}/scripts/fraud-etl-glue.py"
      DefaultArguments:
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-glue-datacatalog": "true"
        "--enable-job-insights": "true"
        "--enable-metrics": "true"
        "--job-bookmark-option": "job-bookmark-disable"
        "--job-language": "python"
        "--catalog_db": "default"
        "--catalog_table": "fraud-raw-input"
        "--bucket": !Ref Bucket
        "--entity_type": "customer"
        "--train_source_key": "input/fraudTrain.csv"
        "--test_source_key": "input/fraudTest.csv"
        "--train_dest_key": "glue_transformed/train/fraudTrain.csv"
        "--test_dest_key": "glue_transformed/test/fraudTest.csv"
        "--train_max_cut_off": "2020-04-30 00:00:00"
        "--test_min_cut_off": "2020-08-30 00:00:00"
        "--fraud_samples": "12"
        "--legit_samples": "130"
      ExecutionProperty:
        MaxConcurrentRuns: 2
      MaxRetries: 0
      GlueVersion: 3.0
      WorkerType: Standard
      NumberOfWorkers: 2
      Timeout: 10
      Name: glue-etl-fraud
      Role: !ImportValue RoleGlue-Arn
  GlueClassifier:
    Type: AWS::Glue::Classifier
    Properties:
      CsvClassifier:
        ContainsHeader: PRESENT
        Delimiter: ','
        Header:
          - index
          - trans_date_trans_time
          - cc_num
          - merchant
          - category
          - amt
          - first
          - last
          - gender
          - street
          - city
          - state
          - zip
          - lat
          - long
          - city_pop
          - job
          - dob
          - trans_num
          - unix_time
          - merch_lat
          - merch_long
          - is_fraud
        Name: "FraudClassifier"
  FraudDataCrawler:
      Type: AWS::Glue::Crawler
      Properties:
        Name: "crawler-fraud-train-test"
        DatabaseName: "default"
        Classifiers:
          - !Ref GlueClassifier
        Targets:
          S3Targets:
            - Path: !Sub "s3://${Bucket}/{Prefix}"
        SchemaChangePolicy:
          UpdateBehavior: "UPDATE_IN_DATABASE"
          DeleteBehavior: "DELETE_FROM_DATABASE"
        RecrawlPolicy:
          RecrawlBehavior: CRAWL_EVERYTHING
        Role: !ImportValue RoleGlue-Arn
        TablePrefix : "fraud-raw-"
  FraudDetectorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: frauddetector.amazonaws.com
            Action: sts:AssumeRole
      RoleName: FraudDetectorRoleS3Access
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  A2ISagemakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      RoleName: A2ISagemakerExecutionRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonFraudDetectorFullAccessPolicy
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: LambdaRoleforGlue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/AmazonFraudDetectorFullAccessPolicy
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
  GlueLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import logging
          import boto3
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          client = boto3.client('glue')
          glueJobName = "glue-etl-fraud"

          def handler(event, context):
            logger.info('## INITIATED BY S3 EVENT: ')
            response = client.start_job_run(JobName = glueJobName)
            logger.info('## STARTED GLUE JOB: ' + glueJobName)
            logger.info('## GLUE JOB RUN ID: ' + response['JobRunId'])
            return response
      Handler: index.handler
      FunctionName: TriggerGLue
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: python3.9
      MemorySize: 256
      Timeout: 60
  FraudTrainingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          import re
          s3_client = boto3.client("s3")
          iam = boto3.client("iam")
          fraudDetector = boto3.client("frauddetector")

          INPUT_BUCKET = os.environ["INPUT_BUCKET"]
          DATA_KEY = os.environ["DATA_KEY"]
          DETECTOR_NAME = os.environ["DETECTOR_NAME"]
          MODEL_NAME = os.environ["MODEL_NAME"]
          ENTITY_TYPE = os.environ["ENTITY_TYPE"]
          EVENT_TYPE = os.environ["EVENT_TYPE"]
          MODEL_TYPE = os.environ["MODEL_TYPE"]
          MODEL_VERSION = os.environ["MODEL_VERSION"]
          DETECTOR_VERSION = os.environ["DETECTOR_VERSION"]
          REGION = os.environ["REGION"]
          ROLE_NAME = os.environ["ROLE_NAME"]
          MODE= os.environ["MODE"]

          def get_training_variables():
              s3_client = boto3.client("s3")
              response = s3_client.get_object(Bucket=INPUT_BUCKET, Key=DATA_KEY)
              body = response.get("Body").read().decode("utf-8")
              variables_str = body.split("\n")[0]
              variables = variables_str.split(",")
              variables.pop(-1)
              variables.pop(-1)
              return variables

          def handler(event, context):
            try:
                fraudDetector.create_model(
                    modelId=MODEL_NAME,
                    eventTypeName=EVENT_TYPE,
                    modelType=MODEL_TYPE,
                )
                print("Created model container for training")
            except fraudDetector.exceptions.ValidationException:
                print("Model container already exists so proceeding to model training ....")

            variables = get_training_variables()

            print(f"Starting model training with variables {variables}....")

            try:
                if MODE == "create":
                    print(f"Training new model and incrementing major version")
                    response = fraudDetector.create_model_version(
                        modelId=MODEL_NAME,
                        modelType=MODEL_TYPE,
                        trainingDataSource="EXTERNAL_EVENTS",
                        trainingDataSchema={
                            "modelVariables": variables,
                            "labelSchema": {"labelMapper": {"FRAUD": ["fraud"], "LEGIT": ["legit"]}},
                        },
                        externalEventsDetail={
                            "dataLocation": f"s3://{INPUT_BUCKET}/{DATA_KEY}",
                            "dataAccessRoleArn": iam.get_role(RoleName=ROLE_NAME)["Role"]["Arn"],
                        },
                    )
                    return response
                elif MODE == "update":
                    print(f"Training model and updating existing major model version {MODEL_VERSION}")
                    response = fraudDetector.update_model_version(
                        modelId=MODEL_NAME,
                        modelType=MODEL_TYPE,
                        majorVersionNumber=MODEL_VERSION,
                        externalEventsDetail={
                            "dataLocation": f"s3://{INPUT_BUCKET}/{DATA_KEY}",
                            "dataAccessRoleArn": iam.get_role(RoleName=ROLE_NAME)["Role"]["Arn"],
                        },
                    )
                    return response
            except fraudDetector.exceptions.ValidationException as e:
                    if re.search("Simultaneous training", str(e)):
                        print("Model Version already training")
                    else:
                        raise
      Handler: index.handler
      FunctionName: TrainFraudModel
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          INPUT_BUCKET: !Ref Bucket
          DATA_KEY: !Ref SQSTrainSourceKey
          DETECTOR_NAME: !Ref DetectorName
          MODEL_NAME: !Ref ModelName
          ENTITY_TYPE: !Ref EntityType
          EVENT_TYPE: !Ref EventType
          MODEL_TYPE: !Ref ModelType
          MODEL_VERSION: !Ref ModelVersion
          DETECTOR_VERSION: !Ref DetectorVersion
          REGION: !Ref Region
          ROLE_NAME: !Ref RoleName
          MODE: !Ref TrainMode
  FraudPredictFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          from logging import config
          import time
          import os

          fraudDetector = boto3.client("frauddetector")
          iam = boto3.resource("iam")

          bucket = os.environ["INPUT_BUCKET"]
          batch_input_key = os.environ["DATA_KEY"]
          batch_output_key = os.environ["OUTPUT_KEY"]
          detector_name = os.environ["DETECTOR_NAME"]
          detector_version = os.environ["DETECTOR_VERSION"]
          event_name = os.environ["EVENT_TYPE"]
          entity_type = os.environ["ENTITY_TYPE"]
          role = os.environ["DETECTOR_ROLE"]

          SCORE_THRESHOLD_MAX = os.environ["SCORE_THRESHOLD_MAX"] 
          SCORE_THRESHOLD_MIN = os.environ["SCORE_THRESHOLD_MIN"] 

          s3input = f"s3://{bucket}/{batch_input_key}"
          s3output = f"s3://{bucket}/{batch_output_key}"

          log_config = {
              "version": 1,
              "root": {"handlers": ["console"], "level": "INFO"},
              "handlers": {
                  "console": {
                      "formatter": "std_out",
                      "class": "logging.StreamHandler",
                      "level": "INFO",
                  }
              },
              "formatters": {
                  "std_out": {
                      "format": "%(asctime)s : %(levelname)s : %(module)s : %(funcName)s : %(lineno)d : %(message)s",
                      "datefmt": "%d-%m-%Y %I:%M:%S",
                  }
              },
          }

          config.dictConfig(log_config)

          logger = logging.getLogger(__name__)


          def real_time_predictions(
              payload,
              event_name="credit-card-fraud",
              detector_name="fraud_detector",
              detector_version="1",
          ):
              variables = payload["variables"]
              timestamp = payload["EVENT_TIMESTAMP"]
              event_id = payload["variables"]["trans_num"]
              entity_id = "unknown"
              entity_type = "customer"
              response = fraudDetector.get_event_prediction(
                  detectorId=detector_name,
                  eventId=event_id,
                  detectorVersionId=detector_version,
                  eventTypeName=event_name,
                  eventTimestamp=timestamp,
                  entities=[{"entityType": entity_type, "entityId": entity_id}],
                  eventVariables=variables,
              )
              return response


          def batch_predictions(
              s3input,
              s3output,
              event_name="credit-card-fraud",
              role_name="FraudDetectorRoleS3Access",
              detector_name="fraud_detector",
              detector_version=2
          ):
              role = iam.Role(role_name)
              job_id = f"{event_name}-{str(int((time.time())))}"

              fraudDetector.create_batch_prediction_job(
                  jobId=job_id,
                  inputPath=s3input,
                  outputPath=s3output,
                  eventTypeName=event_name,
                  detectorName=detector_name,
                  detectorVersion=detector_version,
                  iamRoleArn=role.arn,
              )
              time.sleep(5)
              response = fraudDetector.get_batch_prediction_jobs(jobId=job_id)
              return response

          def handler(event, context):
                  if event['Records'][0]['eventSource'] == 'aws:sqs':
                      predictions = "batch"
                  elif 'variables' in event.keys():
                      predictions = "realtime"
                  if predictions == "batch":
                      logger.info("running batch prediction job")
                      if not s3input or not s3output:
                          logger.error(
                              "s3 input and s3 output paths need to be specified for batch mode"
                          )
                          raise
                      response = batch_predictions(
                          s3input, s3output, event_name, role, detector_name, detector_version
                      )
                      if response["batchPredictions"][0]["status"] in [
                          "INPROGRESS",
                          "IN_PROGRESS_INITIALIZING",
                          "PENDING",
                      ]:
                          logger.info("Batch Job submitted successfully")
                          print(response)
                          return response
                      else:
                          logger.error("Batch job not submitted successfully as status not verified")
                          raise
                  elif predictions == "realtime":
                      logger.info("running realtime prediction")
                      response = real_time_predictions(
                          event, event_name, detector_name, detector_version
                      )
                      print("")
                      print(json.dumps(response["modelScores"], default=str, indent=4))
                      if flow_definition:
                          FraudScore = response["modelScores"][0]["scores"][
                              "fraud_model_insightscore"
                          ]
                          if SCORE_THRESHOLD_MIN <= FraudScore <= SCORE_THRESHOLD_MAX:
                              # Create the human loop input JSON object
                              logger.info(
                                  f"fraud score {FraudScore} between range thresholds {SCORE_THRESHOLD_MAX} and {SCORE_THRESHOLD_MIN}"
                              )
                              human_loop_input = {
                                  "score": response["modelScores"][0]["scores"],
                                  "taskObject": payload,
                              }
                              logger.info(f"Started human loop: {humanLoopName}")
                              response = start_human_loop(human_loop_input, flow_definition)
                              print("")
                              print(response)
                      return response
      Handler: index.handler
      FunctionName: PredictFraudModel
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: python3.9
      MemorySize: 256
      Timeout: 300
      Environment:
        Variables:
          INPUT_BUCKET: !Ref Bucket
          DATA_KEY: !Ref SQSPredictSourceKey
          OUTPUT_KEY: !Ref FraudDetectorResultsKey
          DETECTOR_NAME: !Ref DetectorName
          EVENT_TYPE: !Ref EventType
          ENTITY_TYPE: !Ref EntityType
          DETECTOR_VERSION: !Ref DetectorVersion
          DETECTOR_ROLE: !Ref FraudDetectorRole
          SCORE_THRESHOLD_MAX: !Ref ModelScoreThresholdMax
          SCORE_THRESHOLD_MIN: !Ref ModelScoreThresholdMin
  TrainLambdaAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref FraudTrainingFunction
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
  TestLambdaAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref FraudPredictFunction
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger lambda function to execute glue job after crawler completes
      Name: CrawlerSourceLambdaTarget
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "Glue Crawler State Change"
        detail:
          crawlerName: [!Ref FraudDataCrawler]
          state: ["Succeeded"]
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - "GlueLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: "GlueLambdaFunction"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
          Fn::GetAtt:
            - "EventRule"
            - "Arn"
  SQSQueueTrain:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300
      QueueName: S3FraudTrainForLambda
  SQSQueuePredict:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300
      QueueName: S3FraudForLambdaPredict
  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueueTrain
        - !Ref SQSQueuePredict
      PolicyDocument:
        Statement:
          - Action: "SQS:SendMessage"
            Effect: "Allow"
            Principal:
              Service: "s3.amazonaws.com"
            Resource:
                - !GetAtt [SQSQueueTrain, Arn]
                - !GetAtt [SQSQueuePredict, Arn]
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Join ['', ['arn:aws:s3:*:*:', Ref: Bucket]]
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueueTrain.Arn
      FunctionName: !GetAtt FraudTrainingFunction.Arn
  LambdaPredictEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueuePredict.Arn
      FunctionName: !GetAtt FraudPredictFunction.Arn