Parameters:
  DatasetType:
    Default: Interactions
    Description: "Type of dataset resource to create in personalize"
    Type: "String"
Resources:
    PersonalizeDataset:
        Type: AWS::Personalize::Dataset
        Properties:
          DatasetGroupArn: !GetAtt [PersonalizeDatasetGroup, Arn]
          DatasetType: !Ref DatasetType
          Name: Recommend
          SchemaArn: !GetAtt [PersonalizeSchema, SchemaArn]
          DatasetImportJob:
            JobName: Recommend-Job
            DataSource:
              DataLocation: !Ref S3InputPath
            RoleArn: !GetAtt [PersonalizeRole, Arn]
    PersonalizeDatasetGroup:
        Type: AWS::Personalize::DatasetGroup
        Properties:
          Domain: ECOMMERCE
          Name: RecommendGroup
    PersonalizeSchema:
        Type: AWS::Personalize::Schema
        Properties:
          Domain: ECOMMERCE
          Name: RecommendSchema
          Schema: |
            {
              "type": "record",
              "name": "Interactions",
              "namespace": "com.amazonaws.personalize.schema",
              "fields": [
                  {
                      "name": "USER_ID",
                      "type": "string"
                  },
                  {
                      "name": "ITEM_ID",
                      "type": "string"
                  },
                  {
                      "name": "TIMESTAMP",
                      "type": "long"
                  }
              ],
              "version": "1.0"
            }
    PersonalizeSolution:
        Type: AWS::Personalize::Solution
        Properties:
          DatasetGroupArn: !GetAtt [PersonalizeDatasetGroup, Arn]
          Name: RecommendSolution
          RecipeArn: arn:aws:personalize:::recipe/aws-user-personalization
    PersonalizeRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: "PersonalizeRole"
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - personalize.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AmazonS3FullAccess",
                               "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess" ]
    GlueJob:
      Type: AWS::Glue::Job
      Properties:
        Command:
          Name: glueetl
          PythonVersion: "3"
          ScriptLocation: !Sub "s3://aws-glue-assets-${AWS::AccountId}-${AWS::Region}/scripts/personalize-glue-etl-movies.py"
        DefaultArguments:
          "--enable-continuous-cloudwatch-log": "true"
          "--enable-glue-datacatalog": "true"
          "--enable-job-insights": "true"
          "--enable-metrics": "true"
          "--job-bookmark-option": "job-bookmark-disable"
          "--job-language": "python"
        ExecutionProperty:
          MaxConcurrentRuns: 2
        MaxRetries: 0
        GlueVersion: 3.0
        WorkerType: Standard
        NumberOfWorkers: 4
        Timeout: 15
        Name: Recommendation-movies-transform
        Role: !ImportValue RoleGlue-Arn
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2008-10-17'
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        RoleName: LambdaRoleforPersonalize
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
          - arn:aws:iam::aws:policy/AmazonFraudDetectorFullAccessPolicy
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
          - arn:aws:iam::aws:policy/AmazonAugmentedAIFullAccess
    DatasetImportLambda:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          S3Bucket: recommendation-sample-data
          S3Key: lambda/data_import_personalize.zip
        Handler: lambda_function.lambda_handler
        FunctionName: dataset_import_personalize
        Role:
          Fn::GetAtt: [ LambdaRole , "Arn" ]
        Runtime: python3.9
        MemorySize: 1024
        Timeout: 300
        Environment:
          Variables:
            DATASET_ARN: !Ref PersonalizeDataset
            JOB_NAME: "DatasetImportMovies"
            ROLE_ARN: !GetAtt [PersonalizeRole, "Arn"]